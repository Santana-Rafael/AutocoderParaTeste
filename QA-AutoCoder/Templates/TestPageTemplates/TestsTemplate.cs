// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace qa_auto_coder.Templates.TestPageTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class TestsTemplate : TestsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using FluentAssertions;
using GVP.QA.Core.ConfigReader;
using GVP.QA.Core.Jira;
using GVP.QA.MIB3.APIModels;
using GVP.QA.MIB3.APIModels.Factories;
using GVP.QA.MIB3.Execution.Base;
using GVP.QA.MIB3.Live;
using GVP.QA.Model;
using MibClient2.TestLibrary.Selenium;
using NUnit.Framework;
using System.Collections.Generic;

public partial class ");
            
            #line 28 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Tests : Mib3BaseExecution\r\n{\r\n        List<string> _allPagesFields = new List<str" +
                    "ing>() { ");
            
            #line 30 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
 Write(ColumnsNames); 
            
            #line default
            #line hidden
            this.Write("};\r\n\r\n        private List<RequiredField> _requiredFields = new List<RequiredFiel" +
                    "d>()\r\n\t\t{\r\n            ");
            
            #line 34 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
    Write(RequiredFields); 
            
            #line default
            #line hidden
            this.Write("\t\t};\r\n\r\n\t\tprivate List<string> _allBlocksList = new List<string>() { ");
            
            #line 37 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
 Write(AllBlocksList); 
            
            #line default
            #line hidden
            this.Write(" };\r\n\r\n        ");
            
            #line 39 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage _editPage;\r\n\r\n        public override void Init()\r\n        {\r\n          " +
                    "  ListPage = new ");
            
            #line 43 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ListPage();\r\n        }\r\n\r\n\r\n        [Test]\r\n        [JiraKey(\"\")]\r\n        public" +
                    " void OpenEdit([ValueSource(typeof(MibClient2.TestLibrary.Selenium.MibBrowserDat" +
                    "aSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,\r\n            [" +
                    "Values(");
            
            #line 50 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UsersThatHasAccessToThePage));
            
            #line default
            #line hidden
            this.Write(" )] MibUserType userType)\r\n        {\r\n            OpenEditTest<");
            
            #line 52 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"EditPage>(_allPagesFields);
        }

        
        [Test]
        [JiraKey("""")]
        public void OpenList([ValueSource(typeof(MibClient2.TestLibrary.Selenium.MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
            [Values(");
            
            #line 59 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UsersThatHasAccessToThePage));
            
            #line default
            #line hidden
            this.Write(@")] MibUserType userType)
        {
            OpenListTestCheckingAllButtonsAndColumns();
        }

        [Test]
        [JiraKey("""")]
        public void RequiredFields(
        [ValueSource(typeof(MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
        [Values(");
            
            #line 68 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadWriteUsers));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n            CheckRequiredFields(new ");
            
            #line 70 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage(ListPage), _requiredFields);\r\n        }\r\n        \r\n\t\t[Test]\r\n        [Ji" +
                    "raKey(\"\")]\r\n        public void CheckAllBlocks(\r\n        [ValueSource(typeof(Mib" +
                    "BrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,\r\n   " +
                    "     [Values(");
            
            #line 77 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UsersThatHasAccessToThePage));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n\t\t\tListPage.NavigateByMenu();\r\n            L" +
                    "istPage.SelectRowInListPage();\r\n\t\t\t_editPage = new ");
            
            #line 81 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"EditPage(ListPage);
            CheckPageBlocks(_allBlocksList, _editPage);
        }


        [Test]
        [JiraKey("""")]
        public void Edit([ValueSource(typeof(MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
        [Values(");
            
            #line 89 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadWriteUsers));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n            var apiObject = GetOrCreateThrou" +
                    "ghAPI();\r\n            var editedModel = new ");
            
            #line 92 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Factory().InitEdited();\r\n\r\n            _editPage = ");
            
            #line 94 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage.InitAndGoToItem<");
            
            #line 94 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"EditPage>(ListPage, apiObject.ApiObject.Id);

            Edit(editedModel);
            _editPage.Save();
            AssertFields(editedModel);
        }

		[Test]
        [JiraKey("""")]
        public void Delete([ValueSource(typeof(MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
        [Values(");
            
            #line 104 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadWriteUsers));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n            var apiObject = GetOrCreateThrou" +
                    "ghAPI();\r\n\r\n            _editPage = ");
            
            #line 108 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage.InitAndGoToItem<");
            
            #line 108 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"EditPage>(ListPage, apiObject.ApiObject.Id);

            DeleteAndAssert(_editPage);

            RemoveObjectToBeDelete(apiObject.ApiObject);
        }

		[Test]
        [JiraKey("""")]
		public void Create([ValueSource(typeof(MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
        [Values(");
            
            #line 118 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadWriteUsers));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n\t\t\tListPage.NavigateByMenu();\r\n\t\t\tListPage.N" +
                    "ewItem();\r\n\r\n\t\t\t_editPage = new ");
            
            #line 123 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage(ListPage);\r\n\t\t\tvar createModel = new ");
            
            #line 124 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"Factory().Init();
			Edit(createModel);
			_editPage.Save();

			AssertFields(createModel);
			_editPage.Delete();
		}

		[Test]
        [JiraKey("""")]
		public void BulkEdit([ValueSource(typeof(MibBrowserDataSource), MibBrowserDataSource.ALL_BROWSER)] BrowserName browser,
        [Values(");
            
            #line 135 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadWriteUsers));
            
            #line default
            #line hidden
            this.Write(")] MibUserType userType)\r\n        {\r\n\t\t\tListPage.NavigateByMenu();\r\n\t\t\tList<int> " +
                    "ids = ListPage.SelectCheckBoxFromMultipleRandomItems(2);\r\n\t\t\tListPage.ClickOnEdi" +
                    "t();\r\n\t\t\t_editPage = new ");
            
            #line 140 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("EditPage(ListPage);\r\n\r\n\t\t\tvar bulkEditModel = new ");
            
            #line 142 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Factory().InitEdited();\r\n\t\t\tEdit(bulkEditModel);\r\n\t\t\t_editPage.Save();\r\n\r\n\t\t\tAsse" +
                    "rtMultiple");
            
            #line 146 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(ids, bulkEditModel);\r\n\t\t}\r\n\r\n\t\tpublic void AssertMultiple");
            
            #line 149 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(List<int> idList, ");
            
            #line 149 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Model)\r\n\t\t{\r\n\t\t\tforeach (int id in idList)\r\n\t\t\t{\r\n\t\t\t\t_editPage.NavigateById(id)" +
                    ";\r\n\t\t\t\tAssertFields(Model);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        private void Edit(");
            
            #line 158 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n");
            
            #line 160 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EditMethod));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        private void AssertFields(");
            
            #line 163 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n");
            
            #line 165 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssertMethod));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        private ObjectForTest GetOrCreateThroughAPI()\r\n        {\r\n" +
                    "            return GetOrCreateObject<");
            
            #line 170 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 170 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Factory>()[0];\r\n        }\r\n\r\n\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\marco.santos\Documents\Workspace\qa\AutoCoder\QA-AutoCoder\Templates\TestPageTemplates\TestsTemplate.tt"

private string _ClassNameField;

/// <summary>
/// Access the ClassName parameter of the template.
/// </summary>
private string ClassName
{
    get
    {
        return this._ClassNameField;
    }
}

private string _EditMethodField;

/// <summary>
/// Access the EditMethod parameter of the template.
/// </summary>
private string EditMethod
{
    get
    {
        return this._EditMethodField;
    }
}

private string _AssertMethodField;

/// <summary>
/// Access the AssertMethod parameter of the template.
/// </summary>
private string AssertMethod
{
    get
    {
        return this._AssertMethodField;
    }
}

private string _ColumnsNamesField;

/// <summary>
/// Access the ColumnsNames parameter of the template.
/// </summary>
private string ColumnsNames
{
    get
    {
        return this._ColumnsNamesField;
    }
}

private string _RequiredFieldsField;

/// <summary>
/// Access the RequiredFields parameter of the template.
/// </summary>
private string RequiredFields
{
    get
    {
        return this._RequiredFieldsField;
    }
}

private string _AllBlocksListField;

/// <summary>
/// Access the AllBlocksList parameter of the template.
/// </summary>
private string AllBlocksList
{
    get
    {
        return this._AllBlocksListField;
    }
}

private string _ReadWriteUsersField;

/// <summary>
/// Access the ReadWriteUsers parameter of the template.
/// </summary>
private string ReadWriteUsers
{
    get
    {
        return this._ReadWriteUsersField;
    }
}

private string _ReadOnlyUsersField;

/// <summary>
/// Access the ReadOnlyUsers parameter of the template.
/// </summary>
private string ReadOnlyUsers
{
    get
    {
        return this._ReadOnlyUsersField;
    }
}

private string _NoReadUsersField;

/// <summary>
/// Access the NoReadUsers parameter of the template.
/// </summary>
private string NoReadUsers
{
    get
    {
        return this._NoReadUsersField;
    }
}

private string _UsersThatHasAccessToThePageField;

/// <summary>
/// Access the UsersThatHasAccessToThePage parameter of the template.
/// </summary>
private string UsersThatHasAccessToThePage
{
    get
    {
        return this._UsersThatHasAccessToThePageField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ClassNameValueAcquired = false;
if (this.Session.ContainsKey("ClassName"))
{
    this._ClassNameField = ((string)(this.Session["ClassName"]));
    ClassNameValueAcquired = true;
}
if ((ClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ClassName");
    if ((data != null))
    {
        this._ClassNameField = ((string)(data));
    }
}
bool EditMethodValueAcquired = false;
if (this.Session.ContainsKey("EditMethod"))
{
    this._EditMethodField = ((string)(this.Session["EditMethod"]));
    EditMethodValueAcquired = true;
}
if ((EditMethodValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EditMethod");
    if ((data != null))
    {
        this._EditMethodField = ((string)(data));
    }
}
bool AssertMethodValueAcquired = false;
if (this.Session.ContainsKey("AssertMethod"))
{
    this._AssertMethodField = ((string)(this.Session["AssertMethod"]));
    AssertMethodValueAcquired = true;
}
if ((AssertMethodValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AssertMethod");
    if ((data != null))
    {
        this._AssertMethodField = ((string)(data));
    }
}
bool ColumnsNamesValueAcquired = false;
if (this.Session.ContainsKey("ColumnsNames"))
{
    this._ColumnsNamesField = ((string)(this.Session["ColumnsNames"]));
    ColumnsNamesValueAcquired = true;
}
if ((ColumnsNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ColumnsNames");
    if ((data != null))
    {
        this._ColumnsNamesField = ((string)(data));
    }
}
bool RequiredFieldsValueAcquired = false;
if (this.Session.ContainsKey("RequiredFields"))
{
    this._RequiredFieldsField = ((string)(this.Session["RequiredFields"]));
    RequiredFieldsValueAcquired = true;
}
if ((RequiredFieldsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RequiredFields");
    if ((data != null))
    {
        this._RequiredFieldsField = ((string)(data));
    }
}
bool AllBlocksListValueAcquired = false;
if (this.Session.ContainsKey("AllBlocksList"))
{
    this._AllBlocksListField = ((string)(this.Session["AllBlocksList"]));
    AllBlocksListValueAcquired = true;
}
if ((AllBlocksListValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AllBlocksList");
    if ((data != null))
    {
        this._AllBlocksListField = ((string)(data));
    }
}
bool ReadWriteUsersValueAcquired = false;
if (this.Session.ContainsKey("ReadWriteUsers"))
{
    this._ReadWriteUsersField = ((string)(this.Session["ReadWriteUsers"]));
    ReadWriteUsersValueAcquired = true;
}
if ((ReadWriteUsersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ReadWriteUsers");
    if ((data != null))
    {
        this._ReadWriteUsersField = ((string)(data));
    }
}
bool ReadOnlyUsersValueAcquired = false;
if (this.Session.ContainsKey("ReadOnlyUsers"))
{
    this._ReadOnlyUsersField = ((string)(this.Session["ReadOnlyUsers"]));
    ReadOnlyUsersValueAcquired = true;
}
if ((ReadOnlyUsersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ReadOnlyUsers");
    if ((data != null))
    {
        this._ReadOnlyUsersField = ((string)(data));
    }
}
bool NoReadUsersValueAcquired = false;
if (this.Session.ContainsKey("NoReadUsers"))
{
    this._NoReadUsersField = ((string)(this.Session["NoReadUsers"]));
    NoReadUsersValueAcquired = true;
}
if ((NoReadUsersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NoReadUsers");
    if ((data != null))
    {
        this._NoReadUsersField = ((string)(data));
    }
}
bool UsersThatHasAccessToThePageValueAcquired = false;
if (this.Session.ContainsKey("UsersThatHasAccessToThePage"))
{
    this._UsersThatHasAccessToThePageField = ((string)(this.Session["UsersThatHasAccessToThePage"]));
    UsersThatHasAccessToThePageValueAcquired = true;
}
if ((UsersThatHasAccessToThePageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UsersThatHasAccessToThePage");
    if ((data != null))
    {
        this._UsersThatHasAccessToThePageField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class TestsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
